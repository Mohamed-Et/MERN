{"version":3,"sources":["Contextes/auth.js","Contextes/translation.js","PrivateRoute.js","components/header/Navbar.js","components/caroussel/Carrousel.js","pages/Home.js","components/login/LoginForm.js","pages/Login.js","pages/Admin.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","useAuth","useContext","TransContext","PrivateRoute","Component","component","rest","authTokens","render","props","to","pathname","state","referer","location","Navbar","useState","isOpen","setisOpen","logoText","color","nvColor","dark","expand","className","onClick","id","navbar","right","active","Caroussel","setCaroussels","useEffect","axios","get","process","then","response","console","log","activeItem","length","showControls","showIndicators","itemId","src","alt","overlay","home","fluid","LoginForm","t","error","style","show","fade","iconClassName","title","message","text","onSubmit","e","submitHandlerLogin","noValidate","label","icon","name","type","value","email","required","onChange","setEmail","target","password","setPassword","rounded","request","spin","size","fixed","Login","isLoggedIn","setLoggedIn","setError","setMessage","setRequest","setAuthTokens","event","preventDefault","reportValidity","post","status","data","token","Admin","i18n","use","Backend","init","lng","fallbackLng","preload","ns","defaultNS","backend","loadPath","App","existingTokens","JSON","parse","localStorage","getItem","useTranslation","Provider","setItem","stringify","exact","path","Home","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7daaec69.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n","import { createContext, useContext } from \"react\";\r\n\r\nexport const TransContext = createContext();\r\n\r\nexport function useTrans() {\r\n  return useContext(TransContext);\r\n}\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth } from \"./Contextes/auth\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n  const { authTokens } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        authTokens ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/login\", state: { referer: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n} from \"mdbreact\";\r\n\r\nexport default function Navbar(props) {\r\n  const [isOpen, setisOpen] = useState(false);\r\n  const [logoText] = useState(\"Logo\");\r\n  const toggleCollapse = () => {\r\n    setisOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <MDBNavbar color={props.nvColor} dark expand=\"md\" className=\"fixed-top\">\r\n      <MDBNavbarBrand>\r\n        <strong className=\"white-text\">{logoText}</strong>\r\n      </MDBNavbarBrand>\r\n      <MDBNavbarToggler onClick={toggleCollapse} />\r\n      <MDBCollapse id=\"navbarCollapse3\" isOpen={isOpen} navbar>\r\n        <MDBNavbarNav right>\r\n          <MDBNavItem active>\r\n            <MDBNavLink to=\"/login\">Login</MDBNavLink>\r\n          </MDBNavItem>\r\n        </MDBNavbarNav>\r\n      </MDBCollapse>\r\n    </MDBNavbar>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n  MDBCarousel,\r\n  MDBCarouselCaption,\r\n  MDBCarouselInner,\r\n  MDBCarouselItem,\r\n  MDBView,\r\n  MDBMask,\r\n  MDBContainer,\r\n} from \"mdbreact\";\r\n\r\nexport default function Caroussel() {\r\n  const [carousels, setCaroussels] = useState([{}]);\r\n\r\n  const loadCAroussel = () => {\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}caroussel`, {})\r\n      .then((response) => {\r\n        console.log(response);\r\n        setCaroussels(response);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCAroussel();\r\n  });\r\n\r\n  return (\r\n    <MDBContainer>\r\n      <MDBCarousel\r\n        activeItem={1}\r\n        length={3}\r\n        showControls={true}\r\n        showIndicators={true}\r\n        className=\"z-depth-1\"\r\n      >\r\n        <MDBCarouselInner>\r\n          <MDBCarouselItem itemId=\"1\">\r\n            <MDBView>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(68).jpg\"\r\n                alt=\"First slide\"\r\n              />\r\n              <MDBMask overlay=\"black-light\" />\r\n            </MDBView>\r\n            <MDBCarouselCaption>\r\n              <h3 className=\"h3-responsive\">Light mask</h3>\r\n              <p>First text</p>\r\n            </MDBCarouselCaption>\r\n          </MDBCarouselItem>\r\n          <MDBCarouselItem itemId=\"2\">\r\n            <MDBView>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(6).jpg\"\r\n                alt=\"Second slide\"\r\n              />\r\n              <MDBMask overlay=\"black-strong\" />\r\n            </MDBView>\r\n            <MDBCarouselCaption>\r\n              <h3 className=\"h3-responsive\">Strong mask</h3>\r\n              <p>Second text</p>\r\n            </MDBCarouselCaption>\r\n          </MDBCarouselItem>\r\n          <MDBCarouselItem itemId=\"3\">\r\n            <MDBView>\r\n              <img\r\n                className=\"d-block w-100\"\r\n                src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(9).jpg\"\r\n                alt=\"Third slide\"\r\n              />\r\n              <MDBMask overlay=\"black-slight\" />\r\n            </MDBView>\r\n            <MDBCarouselCaption>\r\n              <h3 className=\"h3-responsive\">Slight Mast</h3>\r\n              <p>Third text</p>\r\n            </MDBCarouselCaption>\r\n          </MDBCarouselItem>\r\n        </MDBCarouselInner>\r\n      </MDBCarousel>\r\n    </MDBContainer>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport Navbar from \"../components/header/Navbar\";\r\nimport Caroussel from \"../components/caroussel/Carrousel\";\r\nimport { MDBContainer } from \"mdbreact\";\r\nexport default function home() {\r\n  return (\r\n    <Fragment>\r\n      <Navbar nvColor=\"indigo\"></Navbar>\r\n      <MDBContainer className=\"mt-5 pt-2\" fluid>\r\n        <Caroussel></Caroussel>\r\n      </MDBContainer>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useTrans } from \"./../../Contextes/translation.js\";\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBNotification,\r\n  MDBInput,\r\n  MDBBtn,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\n\r\nexport default function LoginForm(props) {\r\n  const { t } = useTrans();\r\n  return (\r\n    <MDBCard className=\"my-5\">\r\n      <MDBCardBody className=\"z-depth-2\">\r\n        <h3 className=\" dark-grey-text text-center\">\r\n          <strong>{t(\"welcome\")}</strong>\r\n        </h3>\r\n        <hr />\r\n        {props.error && (\r\n          <MDBNotification\r\n            style={{ \"max-width\": \"100%\" }}\r\n            show\r\n            fade\r\n            iconClassName=\"text-warning\"\r\n            title=\"Error\"\r\n            message={props.message}\r\n            text=\"\"\r\n          />\r\n        )}\r\n        <form\r\n          className=\"needs-validation\"\r\n          onSubmit={(e) => {\r\n            props.submitHandlerLogin(e);\r\n          }}\r\n          noValidate\r\n        >\r\n          <MDBInput\r\n            label=\"Your email\"\r\n            icon=\"envelope\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            value={props.email}\r\n            required\r\n            onChange={(e) => {\r\n              props.setEmail(e.target.value);\r\n            }}\r\n          />\r\n          <MDBInput\r\n            value={props.password}\r\n            label=\"Your Password\"\r\n            icon=\"key\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            required\r\n            onChange={(e) => {\r\n              props.setPassword(e.target.value);\r\n            }}\r\n          />\r\n\r\n          <div className=\"text-center mt-3 black-text\">\r\n            <MDBBtn color=\"indigo \" rounded type=\"submit\">\r\n              {props.request && (\r\n                <MDBIcon icon=\"sync\" spin size=\"1x\" fixed className=\"mr-1\" />\r\n              )}\r\n              Log In\r\n            </MDBBtn>\r\n          </div>\r\n        </form>\r\n      </MDBCardBody>\r\n    </MDBCard>\r\n  );\r\n}\r\n","import React, { Fragment, useState } from \"react\";\r\nimport Navbar from \"../components/header/Navbar\";\r\nimport LoginForm from \"../components/login/LoginForm\";\r\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport { useAuth } from \"../Contextes/auth\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default function Login() {\r\n  const [isLoggedIn, setLoggedIn] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [request, setRequest] = useState(false);\r\n  const { setAuthTokens } = useAuth();\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to=\"/admin\" />;\r\n  }\r\n\r\n  const submitHandlerLogin = (event) => {\r\n    event.preventDefault();\r\n    event.target.className += \" was-validated\";\r\n    if (event.target.reportValidity()) {\r\n      setRequest(true);\r\n      axios\r\n        .post(`${process.env.REACT_APP_API_URL}user/login`, {\r\n          email: email,\r\n          password: password,\r\n        })\r\n        .then(\r\n          (response) => {\r\n            if (response.status === 200) {\r\n              setAuthTokens(response.data.token);\r\n              setLoggedIn(true);\r\n            }\r\n          },\r\n          (error) => {\r\n            console.log(\"error\");\r\n            if (error.response.status === 400) {\r\n              setPassword(\"\");\r\n              setError(true);\r\n              setMessage(\r\n                \"Incorrect login information. Please check your credentials and try again\"\r\n              );\r\n            } else {\r\n              setError(true);\r\n              setMessage(\"Please check and correct your input data.\");\r\n            }\r\n          }\r\n        )\r\n        .then(function () {\r\n          setRequest(false);\r\n        });\r\n    } else {\r\n      console.log(\"form not valide\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Navbar nvColor=\"indigo\"></Navbar>\r\n      <MDBContainer className=\"mt-5 pt-5 \">\r\n        <MDBRow className=\"\">\r\n          <MDBCol className=\"col-6 col-offset-3\">\r\n            <LoginForm\r\n              submitHandlerLogin={submitHandlerLogin}\r\n              error={error}\r\n              message={message}\r\n              email={email}\r\n              setEmail={setEmail}\r\n              setPassword={setPassword}\r\n              request={request}\r\n            ></LoginForm>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport Navbar from \"../components/header/Navbar\";\r\nexport default function Admin() {\r\n  return (\r\n    <Fragment>\r\n      <Navbar nvColor=\"indigo\"></Navbar>\r\n      Login\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { useState, Fragment } from \"react\";\nimport { useTranslation, initReactI18next } from \"react-i18next\";\n/* routers */\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport i18n from \"i18next\";\nimport Backend from \"i18next-http-backend\";\n\n/* context */\nimport { AuthContext } from \"./Contextes/auth\";\nimport { TransContext } from \"./Contextes/translation\";\n/* controll access to private routes*/\nimport PrivateRoute from \"./PrivateRoute\";\n\n/*pages*/\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Admin from \"./pages/Admin\";\n//traduction init\ni18n\n  .use(Backend) // passes i18n down to react-i18next\n  .init({\n    lng: \"en\",\n    fallbackLng: \"en\",\n    preload: [\"en\", \"fr\"],\n    ns: [\"translation\"],\n    defaultNS: \"translation\",\n    backend: {\n      loadPath: \"http://localhost:3000/locales/en/translation.json\",\n    },\n  });\nfunction App(props) {\n  /*  manage token logic  */\n  const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\n  const [authTokens, setAuthTokens] = useState(existingTokens);\n\n  const setTokens = (data) => {\n    localStorage.setItem(\"tokens\", JSON.stringify(data));\n    setAuthTokens(data);\n  };\n\n  const { t } = useTranslation();\n\n  return (\n    <TransContext.Provider value={{ t }}>\n      <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/login\" component={Login} />\n            <PrivateRoute path=\"/admin\" component={Admin} />\n          </Switch>\n        </Router>\n      </AuthContext.Provider>\n    </TransContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}